#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Feb  8 20:18:03 2018

@author: keithstaylor
"""



import numpy as np
import numpy.fft as fft
import matplotlib.pyplot as pl
import matplotlib.mlab as mlab
from scipy import fftpack as fftp
from scipy import interpolate

"""
Coloured noise generator


Program to take signal in time domain from *.txt file in same directory and
apply noise. Output is a .txt file in time domain. 
Input signal should contain time and signal amplitudes in same file.
Program assumes that the file H1-PSD.txt is in same directory as 
coloured-noise-generator.py, this is generated by noise-psd-ligoH1-GW150914
"""

#load noise psd
ligo_psd = np.loadtxt('H1-PSD.txt')
nf = ligo_psd[0, :]
xf_n = 1e23*np.sqrt(ligo_psd[1, :])

#load signal from *.txt file, checking user input
filename = input('Enter file name (including \".txt\"): ')
while 1:
    try:
        signal = np.loadtxt(filename)
        break
    except FileNotFoundError:
        print('File not found, please try again... ')

t = signal[0, :]
h = signal[1, :]


N = len(h)
Ts = t[1]-t[0]
m = 0 
sd = 10 
Fs = 1/Ts

hf = abs(2/N*fft.rfft(h)) # convert to freq domain
xf_h = fft.rfftfreq(N, Ts)


#ensure both have same length in the frequency domain
if len(hf) < len(nf):
    hf = np.interp(xf_n, xf_h, hf)
    xf = xf_n
elif len(hf) > len(nf):
    nf = np.interp(xf_h, xf_n, nf)
    xf = xf_h


df = hf*nf



#%%
'''random noise generator'''
noise = np.random.normal(m,sd,N) #Gaussian Noise 
ny = h + noise #noisy signal 


'''ASD'''
#coloured noise
NFFT = 4* Fs
Pxx_gaussian, freqs = mlab.psd(ny, NFFT = int(NFFT), Fs = Fs, window=mlab.window_hanning)
PSD_gaussian = interpolate.interp1d(freqs, Pxx_gaussian)

#random noise
Pxx_coloured, freqs = mlab.psd(??, NFFT = int(NFFT), Fs = Fs, window=mlab.window_hanning)
PSD_coloured = interpolate.interp1d(freqs, Pxx_coloured)


'''
Whitening - wrong lengths

# transform to freq domain, divide by asd, transform back

df_2 = fftp.fft(ny) #2 sided fft
df_1 = df_2[0:N//2] #1 sided fft



white_ny = df_1/ np.sqrt(Pxx_hanning)

white_back = np.fft.irfft(white_ny)
'''



#plot original signal  
pl.figure(1) 

pl.title('Signal')
pl.plot(t,h, label='signal')
pl.xlabel('Time (s)')
pl.ylabel('Amplitude')
pl.grid()

#plot added noise data
pl.figure(2)
pl.subplot(211)
pl.title('Signal + gaussian noise')
pl.plot(t, ny, label='Noisy Signal')
pl.xlabel('Time (s)')
pl.ylabel('Amplitude')
pl.grid()

pl.subplot(212)
pl.title('Signal + coloured noise')
pl.plot(t, ??, label='Noisy Signal')
pl.xlabel('Time (s)')
pl.ylabel('Amplitude')
pl.grid()

#plot asd's
pl.figure(3)

pl.subplot(211)
pl.loglog(freqs, np.sqrt(Pxx_gaussian))
pl.title('ASD, gaussian')
pl.xlabel('Freq (Hz)')
pl.ylabel('ASD (strain)')
pl.grid()

pl.subplot(212)
pl.loglog(freqs, np.sqrt(Pxx_coloured))
pl.title('ASD, coloured')
pl.xlabel('Freq (Hz)')
pl.ylabel('ASD (strain)')
pl.grid()

pl.show()
